{"name":"Javascript","tagline":"Javascript : Test-Driven Learning","body":"<a name=\"README\">[<img src=\"https://camo.githubusercontent.com/eb464a60a4a47f8b600aa71bfbc6aff3fe5c5392/68747470733a2f2f7261772e6769746875622e636f6d2f766f6f646f6f74696b69676f642f6c6f676f2e6a732f6d61737465722f6a732e706e67\" width=\"200px\" height=\"200px\" />](https://github.com/MartinChavez/Learn-Javascript)</a>\r\n\r\n# Javascript : Test-Driven Learning\r\n\r\n***\r\n\r\nA project aimed to help the user master Javascript with a test-driven approach. Each unit contains an annotated tutorial on the code and the ability to run Unit Tests to verify the expected behavior.\r\n\r\n## Topics:\r\n\r\n - Arrays\r\n - Bad Practices and Solutions\r\n - Booleans\r\n - Built-in Functions\r\n - Closure\r\n - Comparisons\r\n - Conditionals\r\n - Exceptions\r\n - Falsey Values\r\n - Function Expressions\r\n - Function Expressions as Parameters\r\n - Functions\r\n - General Performance\r\n - Hoisting\r\n - Logical Assignment\r\n - Loops\r\n - Namespaces\r\n - Numbers\r\n - Object Prototype\r\n - Objects\r\n - Objects Functionality\r\n - Prototypes\r\n - Strings\r\n - Switch Block\r\n - Ternary Conditionals\r\n - Truthy Values\r\n - Variables\r\n\r\nTools\r\n====================\r\n<a name=\"README\">[<img src=\"http://www.jetbus.io/images/logo-node.png\" width=\"50px\" height=\"50px\" />](https://nodejs.org/)</a>\r\n<a name=\"README\">[<img src=\"https://camo.githubusercontent.com/39242419c60a53e1f3cecdeecb2460acce47366f/687474703a2f2f6772756e746a732e636f6d2f696d672f6772756e742d6c6f676f2d6e6f2d776f72646d61726b2e737667\" width=\"50px\" height=\"50px\" />](https://github.com/gruntjs/grunt)</a>\r\n<a name=\"README\">[<img src=\"https://cldup.com/0286W-2y27.png\" width=\"50px\" height=\"50px\" />](https://karma-runner.github.io/0.12/index.html)</a>\r\n<a name=\"README\">[<img src=\"http://eclipsesource.com/blogs/wp-content/uploads/2014/03/jasmine.png\" width=\"50px\" height=\"50px\" />](https://github.com/jasmine/jasmine)</a>\r\n<a name=\"README\">[<img src=\"https://camo.githubusercontent.com/aad5f0385a2d8524cb366a1bad62bc74e797743a/687474703a2f2f692e696d6775722e636f6d2f516d47485067632e706e67\" width=\"50px\" height=\"50px\" />](http://bower.io/)</a>\r\n<a name=\"README\">[<img src=\"https://www.npmjs.com/static/images/npm-logo.svg\" width=\"50px\" height=\"50px\" />](https://www.npmjs.com/)</a>\r\n\r\nArrays\r\n====================\r\n```Javascript\r\n  /* An array is a data structure with automatically indexed positions*/\r\n  it('Arrays can be accessed by indices', function () {\r\n    //The brackets indicate to the compiler to make an array and to fill it with\r\n    //the comma-separated values between the brackets\r\n    var arrayOfStrings = [ \"StringZero\" , \"StringOne\" , \"StringTwo\"];\r\n    //We can access any location of the zero-based array\r\n    expect(arrayOfStrings[1]).toBe(\"StringOne\");\r\n  });\r\n  it('You can reference and change specific cells with indices', function () {\r\n    var arrayOfStrings = [ \"StringOne\" , \"StringOne\" , \"StringTwo\"];\r\n    arrayOfStrings[0] = \"StringZero\"; //You can change the value contained at any index\r\n    expect(arrayOfStrings[0]).toBe(\"StringZero\");\r\n  });\r\n```\r\nFunctions\r\n====================\r\n```Javascript\r\n/*Functions take some input, then execute a series of statements using the input, and outputs a result*/\r\nit('functions help write reusable code', function () {\r\n  expect(addNumbers(1, 2)).toBe(3);\r\n  expect(addNumbers(2, 3)).toBe(5);\r\n  expect(addNumbers(1 + 1, 2 + 1)).toBe(5);//Parameters can also be expressions, which the function will resolve before starting\r\n  var numberOne = 2;\r\n  var numberTwo = 3;\r\n  expect(addNumbers(numberOne, numberTwo)).toBe(5);//Parameters can also be variables\r\n});\r\n\r\n// function keyword tells the compiler that you are defining a function\r\nfunction addNumbers(numberOne, numberTwo) { //The function's name follows the 'function' keyword and should indicate the function's purpose\r\n  //Parameters are passed in a set of parentheses before the first curly brace\r\n  return numberOne + numberTwo;\r\n  //The return keyword works as a terminating statement and exits the function returning the value in front of it\r\n} //The statements that will be executed should be enclosed in curly braces.\r\n\r\n```\r\nNumbers\r\n====================\r\n```Javascript\r\nit('JavaScript uses binary floating point values to handle all of its decimal based operations', function () {\r\n  expect(0.1 + 0.2).toBe(0.30000000000000004);\r\n});\r\nit('You can use the toFixed() method to select the amount of decimal places to display', function () {\r\n  expect((0.1 + 0.2).toFixed(1)).toBe('0.3');\r\n});\r\nit('toFixed() method will round to the last indicated position', function () {\r\n  //0.18 + 0.28 = 0.46\r\n  expect((0.18 + 0.28).toFixed(1)).toBe('0.5');\r\n});\r\nit('parseFloat() turns strings with decimals into numbers', function () {\r\n  expect(parseFloat((0.18 + 0.28).toFixed(1))).toBe(0.5);\r\n});\r\nit('parseInt() looks for the first available integer at the front of a string', function () {\r\n  expect(parseInt(\"55\")).toBe(55);\r\n  expect(parseInt(\"55 is a great number\")).toBe(55);\r\n});\r\nit('if parseInt() does not find an acceptable value at the beginning of a string, it will return a NaN', function () {\r\n  expect(parseInt(\"A great number, 55\")).toBeNaN();\r\n});\r\nit('parseInt() will trim off any decimals that may exist, without rounding', function () {\r\n  expect(parseInt(\"5.78\")).toBe(5);\r\n});\r\nit('parseInt() will accept octal,hexadecimal and decimal values potentially creating undesired results', function () {\r\n  //\"021\" is read as an octal value(base 8) and converts it to decimal\r\n  expect(parseInt(\"021\")).toBe(17);//This is fixed on ECMAScript5\r\n});\r\nit('you can use a radix value to ensure correct parsing', function () {\r\n  //parseInt will accept any radix value from 2-36 for selecting the Base for the result\r\n  expect(parseInt(\"021\", 10)).toBe(21);\r\n});\r\n```\r\n\r\n\r\nAnonymous Closures\r\n====================\r\n```Javascript\r\n//When you create NAMESPACES, the program may still execute its private methods and variables\r\n//It is good practice to use private methods to safely modify private data\r\n//Anonymous Closures allow you to define public and private variables\r\nit('Closures will allow you to make private variables and properties', function () {\r\n  //You can achieve this by surrounding the entire set of properties and values in an immediately\r\n  //invoked function expression\r\n  //The local values and methods will be \"closed\" into the namespace\r\n  var NAMESPACE = (function () {\r\n    var privateArray = [1, 2, 3];\r\n    var privateVariable = 9;\r\n    //In order to make public properties, you can return an object\r\n    return {\r\n      //Since the function expression is invoked, this returned object will be handled immediately\r\n      // to the NAMESPACE variable and become a namespace\r\n      publicArray: function () {\r\n        return [4, 5, 6];\r\n      },\r\n      publicVariable: 10 + privateVariable\r\n    };\r\n  })();//These parentheses indicate that the function expression should be immediately executed\r\n  //Since privateArray and privateVariable are private, we expect them to be undefined\r\n  expect(NAMESPACE.privateArray).toBeUndefined();\r\n  expect(NAMESPACE.privateVariable).toBeUndefined();\r\n  expect(NAMESPACE.publicArray()).toEqual([4, 5, 6]);\r\n  expect(NAMESPACE.publicVariable).toBe(19);\r\n});\r\n```\r\nInstall\r\n====================\r\n```Terminal\r\nnpm install\r\nbower install\r\n```\r\n\r\nRun the Tests\r\n====================\r\n```Javascript\r\ngrunt test\r\n```\r\n[<img src=\"https://s3-us-west-2.amazonaws.com/testdrivenlearningbucket/Run+Tests.png\"  />](https://github.com/MartinChavez/Learn-Javascript)\r\n\r\nQuestions ?\r\n====================\r\nIf you have any questions, please feel free to ask me:\r\n[Martin Chavez Aguilar](mailto:martin.chavez@live.com)\r\n\r\nContributors\r\n====================\r\n* [Martin Chavez Aguilar](http://martinchavezaguilar.com/) - Wrote the project","google":"UA-65026686-1","note":"Don't delete this file! It's used internally to help with page regeneration."}